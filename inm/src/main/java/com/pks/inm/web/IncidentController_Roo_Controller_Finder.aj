// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.pks.inm.web;

import com.pks.inm.domain.Assignee;
import com.pks.inm.domain.IncStatus;
import com.pks.inm.domain.Incident;
import com.pks.inm.domain.Product;
import com.pks.inm.domain.Status;
import com.pks.inm.web.IncidentController;
import java.util.Date;
import org.springframework.format.annotation.DateTimeFormat;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

privileged aspect IncidentController_Roo_Controller_Finder {
    
    @RequestMapping(params = { "find=ByAssignee", "form" }, method = RequestMethod.GET)
    public String IncidentController.findIncidentsByAssigneeForm(Model uiModel) {
        uiModel.addAttribute("assignees", Assignee.findAllAssignees());
        return "incidents/findIncidentsByAssignee";
    }
    
    @RequestMapping(params = "find=ByAssignee", method = RequestMethod.GET)
    public String IncidentController.findIncidentsByAssignee(@RequestParam("assignee") Assignee assignee, Model uiModel) {
        uiModel.addAttribute("incidents", Incident.findIncidentsByAssignee(assignee).getResultList());
        return "incidents/list";
    }
    
    @RequestMapping(params = { "find=ByIncidentIDEquals", "form" }, method = RequestMethod.GET)
    public String IncidentController.findIncidentsByIncidentIDEqualsForm(Model uiModel) {
        return "incidents/findIncidentsByIncidentIDEquals";
    }
    
    @RequestMapping(params = "find=ByIncidentIDEquals", method = RequestMethod.GET)
    public String IncidentController.findIncidentsByIncidentIDEquals(@RequestParam("incidentID") String incidentID, Model uiModel) {
        uiModel.addAttribute("incidents", Incident.findIncidentsByIncidentIDEquals(incidentID).getResultList());
        return "incidents/list";
    }
    
    @RequestMapping(params = { "find=ByIncidentIDIsNotNull", "form" }, method = RequestMethod.GET)
    public String IncidentController.findIncidentsByIncidentIDIsNotNullForm() {
        return "incidents/findIncidentsByIncidentIDIsNotNull";
    }
    
    @RequestMapping(params = "find=ByIncidentIDIsNotNull", method = RequestMethod.GET)
    public String IncidentController.findIncidentsByIncidentIDIsNotNull(Model uiModel) {
        uiModel.addAttribute("incidents", Incident.findIncidentsByIncidentIDIsNotNull().getResultList());
        return "incidents/list";
    }
    
    @RequestMapping(params = { "find=ByIncidentIDIsNull", "form" }, method = RequestMethod.GET)
    public String IncidentController.findIncidentsByIncidentIDIsNullForm() {
        return "incidents/findIncidentsByIncidentIDIsNull";
    }
    
    @RequestMapping(params = "find=ByIncidentIDIsNull", method = RequestMethod.GET)
    public String IncidentController.findIncidentsByIncidentIDIsNull(Model uiModel) {
        uiModel.addAttribute("incidents", Incident.findIncidentsByIncidentIDIsNull().getResultList());
        return "incidents/list";
    }
    
    @RequestMapping(params = { "find=ByIncidentIDLike", "form" }, method = RequestMethod.GET)
    public String IncidentController.findIncidentsByIncidentIDLikeForm(Model uiModel) {
        return "incidents/findIncidentsByIncidentIDLike";
    }
    
    @RequestMapping(params = "find=ByIncidentIDLike", method = RequestMethod.GET)
    public String IncidentController.findIncidentsByIncidentIDLike(@RequestParam("incidentID") String incidentID, Model uiModel) {
        uiModel.addAttribute("incidents", Incident.findIncidentsByIncidentIDLike(incidentID).getResultList());
        return "incidents/list";
    }
    
    @RequestMapping(params = { "find=ByPriority", "form" }, method = RequestMethod.GET)
    public String IncidentController.findIncidentsByPriorityForm(Model uiModel) {
        uiModel.addAttribute("statuses", Status.findAllStatuses());
        return "incidents/findIncidentsByPriority";
    }
    
    @RequestMapping(params = "find=ByPriority", method = RequestMethod.GET)
    public String IncidentController.findIncidentsByPriority(@RequestParam("priority") Status priority, Model uiModel) {
        uiModel.addAttribute("incidents", Incident.findIncidentsByPriority(priority).getResultList());
        return "incidents/list";
    }
    
    @RequestMapping(params = { "find=ByProduct", "form" }, method = RequestMethod.GET)
    public String IncidentController.findIncidentsByProductForm(Model uiModel) {
        uiModel.addAttribute("products", Product.findAllProducts());
        return "incidents/findIncidentsByProduct";
    }
    
    @RequestMapping(params = "find=ByProduct", method = RequestMethod.GET)
    public String IncidentController.findIncidentsByProduct(@RequestParam("product") Product product, Model uiModel) {
        uiModel.addAttribute("incidents", Incident.findIncidentsByProduct(product).getResultList());
        return "incidents/list";
    }
    
    @RequestMapping(params = { "find=ByReportedDateBetween", "form" }, method = RequestMethod.GET)
    public String IncidentController.findIncidentsByReportedDateBetweenForm(Model uiModel) {
        addDateTimeFormatPatterns(uiModel);
        return "incidents/findIncidentsByReportedDateBetween";
    }
    
    @RequestMapping(params = "find=ByReportedDateBetween", method = RequestMethod.GET)
    public String IncidentController.findIncidentsByReportedDateBetween(@RequestParam("minReportedDate") @DateTimeFormat(style = "M-") Date minReportedDate, @RequestParam("maxReportedDate") @DateTimeFormat(style = "M-") Date maxReportedDate, Model uiModel) {
        uiModel.addAttribute("incidents", Incident.findIncidentsByReportedDateBetween(minReportedDate, maxReportedDate).getResultList());
        addDateTimeFormatPatterns(uiModel);
        return "incidents/list";
    }
    
    @RequestMapping(params = { "find=ByReportedDateEquals", "form" }, method = RequestMethod.GET)
    public String IncidentController.findIncidentsByReportedDateEqualsForm(Model uiModel) {
        addDateTimeFormatPatterns(uiModel);
        return "incidents/findIncidentsByReportedDateEquals";
    }
    
    @RequestMapping(params = "find=ByReportedDateEquals", method = RequestMethod.GET)
    public String IncidentController.findIncidentsByReportedDateEquals(@RequestParam("reportedDate") @DateTimeFormat(style = "M-") Date reportedDate, Model uiModel) {
        uiModel.addAttribute("incidents", Incident.findIncidentsByReportedDateEquals(reportedDate).getResultList());
        addDateTimeFormatPatterns(uiModel);
        return "incidents/list";
    }
    
    @RequestMapping(params = { "find=ByReportedDateGreaterThanEquals", "form" }, method = RequestMethod.GET)
    public String IncidentController.findIncidentsByReportedDateGreaterThanEqualsForm(Model uiModel) {
        addDateTimeFormatPatterns(uiModel);
        return "incidents/findIncidentsByReportedDateGreaterThanEquals";
    }
    
    @RequestMapping(params = "find=ByReportedDateGreaterThanEquals", method = RequestMethod.GET)
    public String IncidentController.findIncidentsByReportedDateGreaterThanEquals(@RequestParam("reportedDate") @DateTimeFormat(style = "M-") Date reportedDate, Model uiModel) {
        uiModel.addAttribute("incidents", Incident.findIncidentsByReportedDateGreaterThanEquals(reportedDate).getResultList());
        addDateTimeFormatPatterns(uiModel);
        return "incidents/list";
    }
    
    @RequestMapping(params = { "find=ByResolutionIsNull", "form" }, method = RequestMethod.GET)
    public String IncidentController.findIncidentsByResolutionIsNullForm() {
        return "incidents/findIncidentsByResolutionIsNull";
    }
    
    @RequestMapping(params = "find=ByResolutionIsNull", method = RequestMethod.GET)
    public String IncidentController.findIncidentsByResolutionIsNull(Model uiModel) {
        uiModel.addAttribute("incidents", Incident.findIncidentsByResolutionIsNull().getResultList());
        return "incidents/list";
    }
    
    @RequestMapping(params = { "find=ByResolutionLike", "form" }, method = RequestMethod.GET)
    public String IncidentController.findIncidentsByResolutionLikeForm(Model uiModel) {
        return "incidents/findIncidentsByResolutionLike";
    }
    
    @RequestMapping(params = "find=ByResolutionLike", method = RequestMethod.GET)
    public String IncidentController.findIncidentsByResolutionLike(@RequestParam("resolution") String resolution, Model uiModel) {
        uiModel.addAttribute("incidents", Incident.findIncidentsByResolutionLike(resolution).getResultList());
        return "incidents/list";
    }
    
    @RequestMapping(params = { "find=ByResolvedDateBetween", "form" }, method = RequestMethod.GET)
    public String IncidentController.findIncidentsByResolvedDateBetweenForm(Model uiModel) {
        addDateTimeFormatPatterns(uiModel);
        return "incidents/findIncidentsByResolvedDateBetween";
    }
    
    @RequestMapping(params = "find=ByResolvedDateBetween", method = RequestMethod.GET)
    public String IncidentController.findIncidentsByResolvedDateBetween(@RequestParam("minResolvedDate") @DateTimeFormat(style = "M-") Date minResolvedDate, @RequestParam("maxResolvedDate") @DateTimeFormat(style = "M-") Date maxResolvedDate, Model uiModel) {
        uiModel.addAttribute("incidents", Incident.findIncidentsByResolvedDateBetween(minResolvedDate, maxResolvedDate).getResultList());
        addDateTimeFormatPatterns(uiModel);
        return "incidents/list";
    }
    
    @RequestMapping(params = { "find=ByResolvedDateEquals", "form" }, method = RequestMethod.GET)
    public String IncidentController.findIncidentsByResolvedDateEqualsForm(Model uiModel) {
        addDateTimeFormatPatterns(uiModel);
        return "incidents/findIncidentsByResolvedDateEquals";
    }
    
    @RequestMapping(params = "find=ByResolvedDateEquals", method = RequestMethod.GET)
    public String IncidentController.findIncidentsByResolvedDateEquals(@RequestParam("resolvedDate") @DateTimeFormat(style = "M-") Date resolvedDate, Model uiModel) {
        uiModel.addAttribute("incidents", Incident.findIncidentsByResolvedDateEquals(resolvedDate).getResultList());
        addDateTimeFormatPatterns(uiModel);
        return "incidents/list";
    }
    
    @RequestMapping(params = { "find=ByResolvedDateGreaterThanEquals", "form" }, method = RequestMethod.GET)
    public String IncidentController.findIncidentsByResolvedDateGreaterThanEqualsForm(Model uiModel) {
        addDateTimeFormatPatterns(uiModel);
        return "incidents/findIncidentsByResolvedDateGreaterThanEquals";
    }
    
    @RequestMapping(params = "find=ByResolvedDateGreaterThanEquals", method = RequestMethod.GET)
    public String IncidentController.findIncidentsByResolvedDateGreaterThanEquals(@RequestParam("resolvedDate") @DateTimeFormat(style = "M-") Date resolvedDate, Model uiModel) {
        uiModel.addAttribute("incidents", Incident.findIncidentsByResolvedDateGreaterThanEquals(resolvedDate).getResultList());
        addDateTimeFormatPatterns(uiModel);
        return "incidents/list";
    }
    
    @RequestMapping(params = { "find=ByResolvedDateIsNotNull", "form" }, method = RequestMethod.GET)
    public String IncidentController.findIncidentsByResolvedDateIsNotNullForm() {
        return "incidents/findIncidentsByResolvedDateIsNotNull";
    }
    
    @RequestMapping(params = "find=ByResolvedDateIsNotNull", method = RequestMethod.GET)
    public String IncidentController.findIncidentsByResolvedDateIsNotNull(Model uiModel) {
        uiModel.addAttribute("incidents", Incident.findIncidentsByResolvedDateIsNotNull().getResultList());
        return "incidents/list";
    }
    
    @RequestMapping(params = { "find=ByResolvedDateIsNull", "form" }, method = RequestMethod.GET)
    public String IncidentController.findIncidentsByResolvedDateIsNullForm() {
        return "incidents/findIncidentsByResolvedDateIsNull";
    }
    
    @RequestMapping(params = "find=ByResolvedDateIsNull", method = RequestMethod.GET)
    public String IncidentController.findIncidentsByResolvedDateIsNull(Model uiModel) {
        uiModel.addAttribute("incidents", Incident.findIncidentsByResolvedDateIsNull().getResultList());
        return "incidents/list";
    }
    
    @RequestMapping(params = { "find=ByResolvedDateLessThanEquals", "form" }, method = RequestMethod.GET)
    public String IncidentController.findIncidentsByResolvedDateLessThanEqualsForm(Model uiModel) {
        addDateTimeFormatPatterns(uiModel);
        return "incidents/findIncidentsByResolvedDateLessThanEquals";
    }
    
    @RequestMapping(params = "find=ByResolvedDateLessThanEquals", method = RequestMethod.GET)
    public String IncidentController.findIncidentsByResolvedDateLessThanEquals(@RequestParam("resolvedDate") @DateTimeFormat(style = "M-") Date resolvedDate, Model uiModel) {
        uiModel.addAttribute("incidents", Incident.findIncidentsByResolvedDateLessThanEquals(resolvedDate).getResultList());
        addDateTimeFormatPatterns(uiModel);
        return "incidents/list";
    }
    
    @RequestMapping(params = { "find=ByStatus", "form" }, method = RequestMethod.GET)
    public String IncidentController.findIncidentsByStatusForm(Model uiModel) {
        uiModel.addAttribute("incstatuses", java.util.Arrays.asList(IncStatus.class.getEnumConstants()));
        return "incidents/findIncidentsByStatus";
    }
    
    @RequestMapping(params = "find=ByStatus", method = RequestMethod.GET)
    public String IncidentController.findIncidentsByStatus(@RequestParam("status") IncStatus status, Model uiModel) {
        uiModel.addAttribute("incidents", Incident.findIncidentsByStatus(status).getResultList());
        return "incidents/list";
    }
    
}
