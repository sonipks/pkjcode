// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.pks.inm.domain;

import com.pks.inm.domain.Assignee;
import com.pks.inm.domain.IncStatus;
import com.pks.inm.domain.Incident;
import com.pks.inm.domain.Product;
import com.pks.inm.domain.Status;
import java.util.Date;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect Incident_Roo_Finder {
    
    public static TypedQuery<Incident> Incident.findIncidentsByAssignee(Assignee assignee) {
        if (assignee == null) throw new IllegalArgumentException("The assignee argument is required");
        EntityManager em = Incident.entityManager();
        TypedQuery<Incident> q = em.createQuery("SELECT o FROM Incident AS o WHERE o.assignee = :assignee", Incident.class);
        q.setParameter("assignee", assignee);
        return q;
    }
    
    public static TypedQuery<Incident> Incident.findIncidentsByIncidentIDEquals(String incidentID) {
        if (incidentID == null || incidentID.length() == 0) throw new IllegalArgumentException("The incidentID argument is required");
        EntityManager em = Incident.entityManager();
        TypedQuery<Incident> q = em.createQuery("SELECT o FROM Incident AS o WHERE o.incidentID = :incidentID", Incident.class);
        q.setParameter("incidentID", incidentID);
        return q;
    }
    
    public static TypedQuery<Incident> Incident.findIncidentsByIncidentIDIsNotNull() {
        EntityManager em = Incident.entityManager();
        TypedQuery<Incident> q = em.createQuery("SELECT o FROM Incident AS o WHERE o.incidentID IS NOT NULL", Incident.class);
        return q;
    }
    
    public static TypedQuery<Incident> Incident.findIncidentsByIncidentIDIsNull() {
        EntityManager em = Incident.entityManager();
        TypedQuery<Incident> q = em.createQuery("SELECT o FROM Incident AS o WHERE o.incidentID IS NULL", Incident.class);
        return q;
    }
    
    public static TypedQuery<Incident> Incident.findIncidentsByIncidentIDLike(String incidentID) {
        if (incidentID == null || incidentID.length() == 0) throw new IllegalArgumentException("The incidentID argument is required");
        incidentID = incidentID.replace('*', '%');
        if (incidentID.charAt(0) != '%') {
            incidentID = "%" + incidentID;
        }
        if (incidentID.charAt(incidentID.length() - 1) != '%') {
            incidentID = incidentID + "%";
        }
        EntityManager em = Incident.entityManager();
        TypedQuery<Incident> q = em.createQuery("SELECT o FROM Incident AS o WHERE LOWER(o.incidentID) LIKE LOWER(:incidentID)", Incident.class);
        q.setParameter("incidentID", incidentID);
        return q;
    }
    
    public static TypedQuery<Incident> Incident.findIncidentsByPriority(Status priority) {
        if (priority == null) throw new IllegalArgumentException("The priority argument is required");
        EntityManager em = Incident.entityManager();
        TypedQuery<Incident> q = em.createQuery("SELECT o FROM Incident AS o WHERE o.priority = :priority", Incident.class);
        q.setParameter("priority", priority);
        return q;
    }
    
    public static TypedQuery<Incident> Incident.findIncidentsByProduct(Product product) {
        if (product == null) throw new IllegalArgumentException("The product argument is required");
        EntityManager em = Incident.entityManager();
        TypedQuery<Incident> q = em.createQuery("SELECT o FROM Incident AS o WHERE o.product = :product", Incident.class);
        q.setParameter("product", product);
        return q;
    }
    
    public static TypedQuery<Incident> Incident.findIncidentsByReportedDateBetween(Date minReportedDate, Date maxReportedDate) {
        if (minReportedDate == null) throw new IllegalArgumentException("The minReportedDate argument is required");
        if (maxReportedDate == null) throw new IllegalArgumentException("The maxReportedDate argument is required");
        EntityManager em = Incident.entityManager();
        TypedQuery<Incident> q = em.createQuery("SELECT o FROM Incident AS o WHERE o.reportedDate BETWEEN :minReportedDate AND :maxReportedDate", Incident.class);
        q.setParameter("minReportedDate", minReportedDate);
        q.setParameter("maxReportedDate", maxReportedDate);
        return q;
    }
    
    public static TypedQuery<Incident> Incident.findIncidentsByReportedDateEquals(Date reportedDate) {
        if (reportedDate == null) throw new IllegalArgumentException("The reportedDate argument is required");
        EntityManager em = Incident.entityManager();
        TypedQuery<Incident> q = em.createQuery("SELECT o FROM Incident AS o WHERE o.reportedDate = :reportedDate", Incident.class);
        q.setParameter("reportedDate", reportedDate);
        return q;
    }
    
    public static TypedQuery<Incident> Incident.findIncidentsByReportedDateGreaterThanEquals(Date reportedDate) {
        if (reportedDate == null) throw new IllegalArgumentException("The reportedDate argument is required");
        EntityManager em = Incident.entityManager();
        TypedQuery<Incident> q = em.createQuery("SELECT o FROM Incident AS o WHERE o.reportedDate >= :reportedDate", Incident.class);
        q.setParameter("reportedDate", reportedDate);
        return q;
    }
    
    public static TypedQuery<Incident> Incident.findIncidentsByResolutionIsNull() {
        EntityManager em = Incident.entityManager();
        TypedQuery<Incident> q = em.createQuery("SELECT o FROM Incident AS o WHERE o.resolution IS NULL", Incident.class);
        return q;
    }
    
    public static TypedQuery<Incident> Incident.findIncidentsByResolutionLike(String resolution) {
        if (resolution == null || resolution.length() == 0) throw new IllegalArgumentException("The resolution argument is required");
        resolution = resolution.replace('*', '%');
        if (resolution.charAt(0) != '%') {
            resolution = "%" + resolution;
        }
        if (resolution.charAt(resolution.length() - 1) != '%') {
            resolution = resolution + "%";
        }
        EntityManager em = Incident.entityManager();
        TypedQuery<Incident> q = em.createQuery("SELECT o FROM Incident AS o WHERE LOWER(o.resolution) LIKE LOWER(:resolution)", Incident.class);
        q.setParameter("resolution", resolution);
        return q;
    }
    
    public static TypedQuery<Incident> Incident.findIncidentsByResolvedDateBetween(Date minResolvedDate, Date maxResolvedDate) {
        if (minResolvedDate == null) throw new IllegalArgumentException("The minResolvedDate argument is required");
        if (maxResolvedDate == null) throw new IllegalArgumentException("The maxResolvedDate argument is required");
        EntityManager em = Incident.entityManager();
        TypedQuery<Incident> q = em.createQuery("SELECT o FROM Incident AS o WHERE o.resolvedDate BETWEEN :minResolvedDate AND :maxResolvedDate", Incident.class);
        q.setParameter("minResolvedDate", minResolvedDate);
        q.setParameter("maxResolvedDate", maxResolvedDate);
        return q;
    }
    
    public static TypedQuery<Incident> Incident.findIncidentsByResolvedDateEquals(Date resolvedDate) {
        if (resolvedDate == null) throw new IllegalArgumentException("The resolvedDate argument is required");
        EntityManager em = Incident.entityManager();
        TypedQuery<Incident> q = em.createQuery("SELECT o FROM Incident AS o WHERE o.resolvedDate = :resolvedDate", Incident.class);
        q.setParameter("resolvedDate", resolvedDate);
        return q;
    }
    
    public static TypedQuery<Incident> Incident.findIncidentsByResolvedDateGreaterThanEquals(Date resolvedDate) {
        if (resolvedDate == null) throw new IllegalArgumentException("The resolvedDate argument is required");
        EntityManager em = Incident.entityManager();
        TypedQuery<Incident> q = em.createQuery("SELECT o FROM Incident AS o WHERE o.resolvedDate >= :resolvedDate", Incident.class);
        q.setParameter("resolvedDate", resolvedDate);
        return q;
    }
    
    public static TypedQuery<Incident> Incident.findIncidentsByResolvedDateIsNotNull() {
        EntityManager em = Incident.entityManager();
        TypedQuery<Incident> q = em.createQuery("SELECT o FROM Incident AS o WHERE o.resolvedDate IS NOT NULL", Incident.class);
        return q;
    }
    
    public static TypedQuery<Incident> Incident.findIncidentsByResolvedDateIsNull() {
        EntityManager em = Incident.entityManager();
        TypedQuery<Incident> q = em.createQuery("SELECT o FROM Incident AS o WHERE o.resolvedDate IS NULL", Incident.class);
        return q;
    }
    
    public static TypedQuery<Incident> Incident.findIncidentsByResolvedDateLessThanEquals(Date resolvedDate) {
        if (resolvedDate == null) throw new IllegalArgumentException("The resolvedDate argument is required");
        EntityManager em = Incident.entityManager();
        TypedQuery<Incident> q = em.createQuery("SELECT o FROM Incident AS o WHERE o.resolvedDate <= :resolvedDate", Incident.class);
        q.setParameter("resolvedDate", resolvedDate);
        return q;
    }
    
    public static TypedQuery<Incident> Incident.findIncidentsByStatus(IncStatus status) {
        if (status == null) throw new IllegalArgumentException("The status argument is required");
        EntityManager em = Incident.entityManager();
        TypedQuery<Incident> q = em.createQuery("SELECT o FROM Incident AS o WHERE o.status = :status", Incident.class);
        q.setParameter("status", status);
        return q;
    }
    
}
