// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.pks.inm.domain;

import com.pks.inm.domain.Assignee;
import com.pks.inm.domain.IncStatus;
import com.pks.inm.domain.Incident;
import com.pks.inm.domain.IncidentDataOnDemand;
import com.pks.inm.domain.Product;
import com.pks.inm.domain.Status;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.stereotype.Component;

privileged aspect IncidentDataOnDemand_Roo_DataOnDemand {
    
    declare @type: IncidentDataOnDemand: @Component;
    
    private Random IncidentDataOnDemand.rnd = new SecureRandom();
    
    private List<Incident> IncidentDataOnDemand.data;
    
    public Incident IncidentDataOnDemand.getNewTransientIncident(int index) {
        Incident obj = new Incident();
        setAssignee(obj, index);
        setDetailedDesc(obj, index);
        setImpact(obj, index);
        setIncidentID(obj, index);
        setPriority(obj, index);
        setProduct(obj, index);
        setReportedDate(obj, index);
        setResolution(obj, index);
        setResolvedDate(obj, index);
        setStatus(obj, index);
        setSummary(obj, index);
        setUrgency(obj, index);
        setWorkDetail(obj, index);
        return obj;
    }
    
    public void IncidentDataOnDemand.setAssignee(Incident obj, int index) {
        Assignee assignee = null;
        obj.setAssignee(assignee);
    }
    
    public void IncidentDataOnDemand.setDetailedDesc(Incident obj, int index) {
        String detailedDesc = "detailedDesc_" + index;
        obj.setDetailedDesc(detailedDesc);
    }
    
    public void IncidentDataOnDemand.setImpact(Incident obj, int index) {
        Status impact = null;
        obj.setImpact(impact);
    }
    
    public void IncidentDataOnDemand.setIncidentID(Incident obj, int index) {
        String incidentID = "incidentID_" + index;
        obj.setIncidentID(incidentID);
    }
    
    public void IncidentDataOnDemand.setPriority(Incident obj, int index) {
        Status priority = null;
        obj.setPriority(priority);
    }
    
    public void IncidentDataOnDemand.setProduct(Incident obj, int index) {
        Product product = null;
        obj.setProduct(product);
    }
    
    public void IncidentDataOnDemand.setReportedDate(Incident obj, int index) {
        Date reportedDate = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setReportedDate(reportedDate);
    }
    
    public void IncidentDataOnDemand.setResolution(Incident obj, int index) {
        String resolution = "resolution_" + index;
        obj.setResolution(resolution);
    }
    
    public void IncidentDataOnDemand.setResolvedDate(Incident obj, int index) {
        Date resolvedDate = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setResolvedDate(resolvedDate);
    }
    
    public void IncidentDataOnDemand.setStatus(Incident obj, int index) {
        IncStatus status = IncStatus.class.getEnumConstants()[0];
        obj.setStatus(status);
    }
    
    public void IncidentDataOnDemand.setSummary(Incident obj, int index) {
        String summary = "summary_" + index;
        obj.setSummary(summary);
    }
    
    public void IncidentDataOnDemand.setUrgency(Incident obj, int index) {
        Status urgency = null;
        obj.setUrgency(urgency);
    }
    
    public void IncidentDataOnDemand.setWorkDetail(Incident obj, int index) {
        String workDetail = "workDetail_" + index;
        obj.setWorkDetail(workDetail);
    }
    
    public Incident IncidentDataOnDemand.getSpecificIncident(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Incident obj = data.get(index);
        Long id = obj.getId();
        return Incident.findIncident(id);
    }
    
    public Incident IncidentDataOnDemand.getRandomIncident() {
        init();
        Incident obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return Incident.findIncident(id);
    }
    
    public boolean IncidentDataOnDemand.modifyIncident(Incident obj) {
        return false;
    }
    
    public void IncidentDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Incident.findIncidentEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Incident' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Incident>();
        for (int i = 0; i < 10; i++) {
            Incident obj = getNewTransientIncident(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
