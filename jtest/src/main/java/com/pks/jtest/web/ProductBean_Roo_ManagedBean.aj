// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.pks.jtest.web;

import com.pks.jtest.domain.Product;
import com.pks.jtest.web.ProductBean;
import com.pks.jtest.web.util.MessageFactory;
import java.util.ArrayList;
import java.util.List;
import javax.annotation.PostConstruct;
import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.faces.application.Application;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;
import javax.faces.component.html.HtmlOutputText;
import javax.faces.component.html.HtmlPanelGrid;
import javax.faces.context.FacesContext;
import org.primefaces.component.inputtext.InputText;
import org.primefaces.component.message.Message;
import org.primefaces.component.outputlabel.OutputLabel;
import org.primefaces.context.RequestContext;
import org.primefaces.event.CloseEvent;

privileged aspect ProductBean_Roo_ManagedBean {
    
    declare @type: ProductBean: @ManagedBean(name = "productBean");
    
    declare @type: ProductBean: @SessionScoped;
    
    private String ProductBean.name = "Products";
    
    private Product ProductBean.product;
    
    private List<Product> ProductBean.allProducts;
    
    private boolean ProductBean.dataVisible = false;
    
    private List<String> ProductBean.columns;
    
    private HtmlPanelGrid ProductBean.createPanelGrid;
    
    private HtmlPanelGrid ProductBean.editPanelGrid;
    
    private HtmlPanelGrid ProductBean.viewPanelGrid;
    
    private boolean ProductBean.createDialogVisible = false;
    
    @PostConstruct
    public void ProductBean.init() {
        columns = new ArrayList<String>();
        columns.add("productName");
    }
    
    public String ProductBean.getName() {
        return name;
    }
    
    public List<String> ProductBean.getColumns() {
        return columns;
    }
    
    public List<Product> ProductBean.getAllProducts() {
        return allProducts;
    }
    
    public void ProductBean.setAllProducts(List<Product> allProducts) {
        this.allProducts = allProducts;
    }
    
    public String ProductBean.findAllProducts() {
        allProducts = Product.findAllProducts();
        dataVisible = !allProducts.isEmpty();
        return null;
    }
    
    public boolean ProductBean.isDataVisible() {
        return dataVisible;
    }
    
    public void ProductBean.setDataVisible(boolean dataVisible) {
        this.dataVisible = dataVisible;
    }
    
    public HtmlPanelGrid ProductBean.getCreatePanelGrid() {
        if (createPanelGrid == null) {
            createPanelGrid = populateCreatePanel();
        }
        return createPanelGrid;
    }
    
    public void ProductBean.setCreatePanelGrid(HtmlPanelGrid createPanelGrid) {
        this.createPanelGrid = createPanelGrid;
    }
    
    public HtmlPanelGrid ProductBean.getEditPanelGrid() {
        if (editPanelGrid == null) {
            editPanelGrid = populateEditPanel();
        }
        return editPanelGrid;
    }
    
    public void ProductBean.setEditPanelGrid(HtmlPanelGrid editPanelGrid) {
        this.editPanelGrid = editPanelGrid;
    }
    
    public HtmlPanelGrid ProductBean.getViewPanelGrid() {
        return populateViewPanel();
    }
    
    public void ProductBean.setViewPanelGrid(HtmlPanelGrid viewPanelGrid) {
        this.viewPanelGrid = viewPanelGrid;
    }
    
    public HtmlPanelGrid ProductBean.populateCreatePanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        OutputLabel productNameCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        productNameCreateOutput.setFor("productNameCreateInput");
        productNameCreateOutput.setId("productNameCreateOutput");
        productNameCreateOutput.setValue("Product Name:");
        htmlPanelGrid.getChildren().add(productNameCreateOutput);
        
        InputText productNameCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        productNameCreateInput.setId("productNameCreateInput");
        productNameCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{productBean.product.productName}", String.class));
        productNameCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(productNameCreateInput);
        
        Message productNameCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        productNameCreateInputMessage.setId("productNameCreateInputMessage");
        productNameCreateInputMessage.setFor("productNameCreateInput");
        productNameCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(productNameCreateInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid ProductBean.populateEditPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        OutputLabel productNameEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        productNameEditOutput.setFor("productNameEditInput");
        productNameEditOutput.setId("productNameEditOutput");
        productNameEditOutput.setValue("Product Name:");
        htmlPanelGrid.getChildren().add(productNameEditOutput);
        
        InputText productNameEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        productNameEditInput.setId("productNameEditInput");
        productNameEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{productBean.product.productName}", String.class));
        productNameEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(productNameEditInput);
        
        Message productNameEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        productNameEditInputMessage.setId("productNameEditInputMessage");
        productNameEditInputMessage.setFor("productNameEditInput");
        productNameEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(productNameEditInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid ProductBean.populateViewPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText productNameLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        productNameLabel.setId("productNameLabel");
        productNameLabel.setValue("Product Name:");
        htmlPanelGrid.getChildren().add(productNameLabel);
        
        HtmlOutputText productNameValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        productNameValue.setId("productNameValue");
        productNameValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{productBean.product.productName}", String.class));
        htmlPanelGrid.getChildren().add(productNameValue);
        
        return htmlPanelGrid;
    }
    
    public Product ProductBean.getProduct() {
        if (product == null) {
            product = new Product();
        }
        return product;
    }
    
    public void ProductBean.setProduct(Product product) {
        this.product = product;
    }
    
    public String ProductBean.onEdit() {
        return null;
    }
    
    public boolean ProductBean.isCreateDialogVisible() {
        return createDialogVisible;
    }
    
    public void ProductBean.setCreateDialogVisible(boolean createDialogVisible) {
        this.createDialogVisible = createDialogVisible;
    }
    
    public String ProductBean.displayList() {
        createDialogVisible = false;
        findAllProducts();
        return "product";
    }
    
    public String ProductBean.displayCreateDialog() {
        product = new Product();
        createDialogVisible = true;
        return "product";
    }
    
    public String ProductBean.persist() {
        String message = "";
        if (product.getId() != null) {
            product.merge();
            message = "message_successfully_updated";
        } else {
            product.persist();
            message = "message_successfully_created";
        }
        RequestContext context = RequestContext.getCurrentInstance();
        context.execute("createDialogWidget.hide()");
        context.execute("editDialogWidget.hide()");
        
        FacesMessage facesMessage = MessageFactory.getMessage(message, "Product");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllProducts();
    }
    
    public String ProductBean.delete() {
        product.remove();
        FacesMessage facesMessage = MessageFactory.getMessage("message_successfully_deleted", "Product");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllProducts();
    }
    
    public void ProductBean.reset() {
        product = null;
        createDialogVisible = false;
    }
    
    public void ProductBean.handleDialogClose(CloseEvent event) {
        reset();
    }
    
}
